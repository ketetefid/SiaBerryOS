#!/sbin/openrc-run
#
# Automatically attempt to extend root partition (calculated from
# the root=... kernel command line parameter, with root=PARTUUID=... allowed)
# to fill remaining free space on the card
#
# Operates on a live root filesystem: first pass will simply expand the
# partition, then reboot (as it is not possible to change the kernel partition
# table entry for / on a running system); on the second pass, we resize the
# root filesystem (this can be done 'live').
#
# We first check if the user has promted us to resize by checking "expand" parameter in
# /boot/storij/parameters.txt. This will trigger the first step and will automatically
# be followed by the second step through creating a mark file. The "expand" value in
# /boot/storij/parameters.txt will be automatically set to zero to disable further running.
#
# Copyright (c) 2017 sakaki <sakaki@deciban.com>
# Copyright (c) 2019 ketetefid <ketetefid@gmail.com>

# License: GPL 3.0+
# NO WARRANTY, of course.

description="Auto-expands the root partition"

depend() {
	need localmount
	after modules sysctl root
}

step2="/boot/storij/ExpandStep2"

_resize_if_necessary() {
	local PUUID="" KROOTPART="" ROOTDRIVE="" ROOTPART="" PNUM=""
	# begin by finding the specified root from the kernel command line
	KROOTPART="$(awk -v RS=" " '/^root=/ {print substr($0,6)}' /proc/cmdline)"
	if [[ -z "${KROOTPART}" ]]; then
		eerror "Could not find root=<...> term in kernel command line"
		return 1
	fi
	# if a PARTUUID spec, look it up
	if grep -q "PARTUUID=" <<<"${KROOTPART}"; then
		PUUID="$(cut -d '=' -f 2 <<<"${KROOTPART}" )"
		# make sure lower case
		PUUID="${PUUID,,}"
		if ! ROOTPART="$(findfs PARTUUID=${PUUID})"; then
			eerror "Failed to locate root on PARTUUID ${PUUID}"
			return 1
		fi
	else
		# otherwise, just take it as is
		ROOTPART="${KROOTPART}"
	fi
	# extract the drive from the partition name, e.g.
	# 	/dev/sda2 -> /dev/sda
	# 	/dev/mmcblk0p2 -> /dev/mmcblk0
	ROOTDRIVE="$(sed 's/[0-9]*$//;s/\([0-9]\)p$/\1/' <<<"${ROOTPART}")"
	# get the partition number too
	PNUM="$(egrep -o "[0-9]+$" <<<"${ROOTPART}")"
	if [[ -z "${ROOTPART}" || -z "${ROOTDRIVE}" || -z "${PNUM}" ]]; then
		eerror "Unable to determine root path components"
		return 1
	fi

	if [ ${expand} == "1" ]; then
		# first boot, need to resize root partition to fill disk
		# then, since this is /, need to reboot to get kernel to see it
		# after which its ext4 filesystem can be resized online
		ewarn ""
		ewarn "*******************************************************************"
		ewarn "* Auto resizing root partition to fill microSD card - please wait *"
		ewarn "*  (we will reboot immediately this is done, so kernel notices)   *"
		ewarn "*******************************************************************"
		ewarn ""

		# turn off swapfiles, for safety
		swapoff -a
		# sync filesystems before we begin, to minimize any damage if things
		# should go wrong
		sync
		# begin by resizing the root partition
		if ! sfdisk --no-reread --no-tell-kernel -N ${PNUM} <<<", +" "${ROOTDRIVE}" &>/dev/null; then
			eerror "Failed to resize root partition"
			return 1
		fi

		# Change "expand" parameter to zero in /boot/storij/parameters.txt
		sed -i 's,^\([ ]*expand[ ]*=\).*,\1'0',g' /boot/storij/parameters.txt
		# create a second mark file to say that we have done this
		touch "${step2}"
		if ! [ -f "${step2}" ]; then
			eerror "Failed to create sentinel file '${step2}'"
			return 1
		fi
		ewarn ""
		ewarn "*******************************************************************"
		ewarn "*  Resize completed - rebooting now (this will only happen once)  *"
		ewarn "*******************************************************************"
		ewarn ""
		# let the user read it
		sleep 5
		# then reboot, but don't do it in the context of this, an init script
		sync
		nohup bash -c 'reboot' &>/dev/null&

	elif [ -f "${step2}" ]; then
		# second boot, partition has been resized (and kernel is aware); so now
		# we just need to update the filesystem, which can be done online
		ewarn ""
		ewarn "*******************************************************************"
		ewarn "* Auto resizing root filesystem to fill partition ${PNUM} - please wait *"
		ewarn "*******************************************************************"
		ewarn ""

		# turn off swapfiles, for safety
		swapoff -a
		# sync filesystems before we begin, to minimize any damage if things
		# should go wrong
		sync
		# we mount the root partition in case it is not done already
		mount "${ROOTPART}" / &>/dev/null
		
		if [ $(findmnt -n -o FSTYPE /) == "ext4" ]; then
		       # do an online resize of the root partition's ext4 filing system
		       if ! resize2fs -f "${ROOTPART}" &>/dev/null; then
			       eerror "Failed to resize root filesystem"
			       return 1
		       fi
		elif [ $(findmnt -n -o FSTYPE /) == "btrfs" ]; then
		       if ! btrfs filesystem resize max / &>/dev/null; then
			       eerror "Failed to resize root filesystem"
			       return 1
		       fi
		else
		       eerror "Failed to resize root filesystem: unsupported filesystem"
		       return 1
		fi

		rm -f "${step2}"
                if [ -f "${step2}" ]; then
                        eerror "Failed to delete sentinel file '${step2}'"
                        return 1
                fi
		# restore swaps
		swapon -a
		ewarn ""
		ewarn "*******************************************************************"
		ewarn "*        Root filesystem resized OK - proceeding with boot!       *"
		ewarn "*******************************************************************"
		ewarn ""
		# let the user read it
		sleep 1
		sync
		rc-update --update &>/dev/null
	fi
	return 0
}

start() {
   	ebegin "Checking the partitions, if resizing is needed and requested"
   	_resize_if_necessary
	eend $?
}

